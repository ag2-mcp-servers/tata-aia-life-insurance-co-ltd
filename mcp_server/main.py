# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:24:11+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    LicerCertificatePostRequest,
    LicerCertificatePostResponse,
    LicerCertificatePostResponse1,
    LicerCertificatePostResponse2,
    LicerCertificatePostResponse3,
    LicerCertificatePostResponse4,
    LicerCertificatePostResponse5,
    LicerCertificatePostResponse6,
    PrcptCertificatePostRequest,
    PrcptCertificatePostResponse,
    PrcptCertificatePostResponse1,
    PrcptCertificatePostResponse2,
    PrcptCertificatePostResponse3,
    PrcptCertificatePostResponse4,
    PrcptCertificatePostResponse5,
    PrcptCertificatePostResponse6,
)

app = MCPProxy(
    description='Tata AIA Life Insurance Company Limited provides life insurance solutions to its consumers. Customers can access their policy details [Insurance Policy ï¿½ Life] and premium receipts [Premium Receipt] that are available to be pulled by the policy holders into their DigiLocker account (only documents issued on or after 28-June-2019 are currently available)',
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Tata AIA Life Insurance Co. Ltd.',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/tataaia/v3'}],
)


@app.post(
    '/licer/certificate',
    description=""" API to verify Insurance Policy - Life. """,
    tags=['insurance_policy_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def licer(body: LicerCertificatePostRequest = None):
    """
    Insurance Policy - Life
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/prcpt/certificate',
    description=""" API to verify Premium Receipt. """,
    tags=['premium_receipt_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def prcpt(body: PrcptCertificatePostRequest = None):
    """
    Premium Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
